module CruiseStateFSM:
	constant SPEEDMIN : float;
	constant SPEEDMAX : float;
	constant PEDALSMIN : float;

	input fsmOn, fsmOff, fsmResume, fsmSet, fsmQuickAccel, fsmQuickDecel;
	input fsmSpeed : float, fsmAccel : float, fsmBrake : float;
	output fsmCruiseSpeed : float;
	output fsmCruiseState: integer;
	
	var state := 1 : integer in

	loop
	emit fsmCruiseState(state);
	pause;
		%OFF state
		if state = 1 then
			%Handle state changes
			present pre(fsmOn) then
				state := 2;
			end present;

		%ON state
		elsif state = 2 then
			%Handle state changes
			present pre(fsmOff) then 
				state := 1;
			else
				if pre(?fsmBrake) > PEDALSMIN then
					state := 3;
				elsif pre(?fsmAccel) > PEDALSMIN or pre(?fsmSpeed) > SPEEDMAX or pre(?fsmSpeed) < SPEEDMIN then
					state := 4;
				end if;
			end present;

		%STANDBY state
		elsif state = 3 then
			%Handle state changes
			present pre(fsmOff) then 
				state := 1;
			else
				if pre(?fsmBrake) < PEDALSMIN and (pre(?fsmSpeed) > SPEEDMAX or pre(?fsmSpeed) < SPEEDMIN) then
					state := 4;
				elsif pre(?fsmBrake) < PEDALSMIN and pre(?fsmSpeed) < SPEEDMAX and pre(?fsmSpeed) > SPEEDMIN then
					state := 2;
				end if;
			end present;

		%DISABLE state
		else
			%Handle state changes
			present pre(fsmOff) then
				state := 1;
			else
				if pre(?fsmBrake) > PEDALSMIN then
					state := 3;
				elsif pre(?fsmAccel) < PEDALSMIN and pre(?fsmSpeed) < SPEEDMAX and pre(?fsmSpeed) > SPEEDMIN then
					state := 2;
				end if;		
			end present;
		end if;
	end loop;
	end var;
end module

module CruiseSpeedFlow:
	constant SPEEDMIN : float;
	constant SPEEDMAX : float;
	constant SPEEDINC : float;

	input csmSet, csmQuickAccel, csmQuickDecel;
	input csmSpeed : float;
	input csmState : integer;
	output csmCruiseSpeed : float;
		
	var temp := 0.0f : float in
		loop
			emit csmCruiseSpeed(temp);
			pause;
			trap T1 in
				%Setting speed
				if(?csmState = 1) then
					temp := 0.0f;
					exit T1;
				end if;

				if (?csmState = 2 and pre(?csmState) = 1) then
					if (?csmSpeed > SPEEDMAX) then
						temp := SPEEDMAX; exit T1;
					elsif (?csmSpeed < SPEEDMIN) then
						temp := SPEEDMIN; exit T1;
					else
						temp := ?csmSpeed; exit T1;
					end if;
				end if;

				present csmSet then
					if (?csmSpeed > SPEEDMAX) then
						temp := SPEEDMAX; exit T1;
					elsif (?csmSpeed < SPEEDMIN) then
						temp := SPEEDMIN; exit T1;
					else
						temp := ?csmSpeed; exit T1;
					end if;
				end present;

				%Handling quick accelerations/decelerations
				present pre(csmQuickAccel) then
					if (temp > (SPEEDMAX - SPEEDINC)) then
						temp := SPEEDMAX;
						exit T1;
					else
						temp := temp + SPEEDINC;
						exit T1;
					end if;
				end present;
				present pre(csmQuickDecel) then
					if (temp < (SPEEDMIN + SPEEDINC)) then
						temp := SPEEDMIN;
						exit T1;
					else
						temp := temp - SPEEDINC;
						exit T1;
					end if;
				end present;
			end trap
		end loop
	end var
end module

module CarSpeedControl:
	input cscCruiseState : integer, cscCruiseSpeed : float, cscSpeed : float, cscAccel : float;
	output cscThrottleCmd : float;

	function regulateThrottle(integer, float, float) : float;
	
	var toRegulate := false : boolean in
	loop
		present(cscCruiseState) then
			if (?cscCruiseState = 2) then
				toRegulate := true;
			else
				toRegulate := false;
			end if;
		end present;

		if toRegulate then
			if (?cscCruiseState = 2 and pre(?cscCruiseState) = 1) then
				emit cscThrottleCmd(regulateThrottle(1, ?cscCruiseSpeed, ?cscSpeed));
			else 
				emit cscThrottleCmd(regulateThrottle(0, ?cscCruiseSpeed, ?cscSpeed));
			end if;
		else
			emit cscThrottleCmd(?cscAccel);
		end if;

		pause;
	end loop
	end var
end module

module cruiseController:
	input On, Off, Resume, Set, QuickDecel, QuickAccel; 
	input Accel : float, Brake : float, Speed : float;
	output CruiseSpeed: float, ThrottleCmd : float, CruiseState : integer;
	
	run CruiseStateFSM[	signal On/fsmOn;
				signal Off/fsmOff;
				signal Resume/fsmResume;
				signal Set/fsmSet;
				signal QuickAccel/fsmQuickAccel;
				signal QuickDecel/fsmQuickDecel;
				signal Speed/fsmSpeed;
				signal Accel/fsmAccel;
				signal Brake/fsmBrake; 
				signal CruiseSpeed/fsmCruiseSpeed; 
				signal CruiseState/fsmCruiseState];
	||
	run CruiseSpeedFlow[	signal Set/csmSet; 
				signal QuickAccel/csmQuickAccel;
				signal QuickDecel/csmQuickDecel;
				signal Speed/csmSpeed;
				signal CruiseState/csmState;
				signal CruiseSpeed/csmCruiseSpeed];
	||
	run CarSpeedControl[	signal CruiseState/cscCruiseState;
				signal CruiseSpeed/cscCruiseSpeed;
				signal Speed/cscSpeed;
				signal Accel/cscAccel;
				signal ThrottleCmd/cscThrottleCmd];

end module
